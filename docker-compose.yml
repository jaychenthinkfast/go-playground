version: '3'

services:
  # 前端服务 - 提供Vue.js界面
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: go-playground-frontend
    ports:
      - "3003:80"  # 映射主机3003端口到容器80端口
    depends_on:
      backend-go124:
        condition: service_healthy
      backend-go123:
        condition: service_healthy
      backend-go122:
        condition: service_healthy
      share-service:
        condition: service_healthy
    networks:
      - playground-network
    restart: always
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 200M
        reservations:
          cpus: '0.1'
          memory: 100M
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Share 服务
  share-service:
    build:
      context: ./share-service
      dockerfile: Dockerfile
    container_name: go-playground-share
    environment:
      - TZ=UTC
      - PORT=3002
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=playground
    ports:
      - "3002:3002"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M
        reservations:
          cpus: '0.1'
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB 服务
  mongo:
    build:
      context: .
      dockerfile: share-service/Dockerfile.mongo
    container_name: go-playground-mongo
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=playground
    networks:
      - playground-network
    restart: always
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 500M
        reservations:
          cpus: '0.1'
          memory: 200M
    # 健康检查
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Go 1.24 后端服务
  backend-go124:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        GO_VERSION: "1.24"
        GO_MOD_VERSION: "1.24"
    container_name: go-playground-backend-go124
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.24
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: 
        - "CMD-SHELL"
        - "wget -qO- http://localhost:3001/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Go 1.23 后端服务
  backend-go123:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        GO_VERSION: "1.23"
        GO_MOD_VERSION: "1.23"
    container_name: go-playground-backend-go123
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.23
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: 
        - "CMD-SHELL"
        - "wget -qO- http://localhost:3001/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Go 1.22 后端服务
  backend-go122:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      args:
        GO_VERSION: "1.22"
        GO_MOD_VERSION: "1.22"
    container_name: go-playground-backend-go122
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.22
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: 
        - "CMD-SHELL"
        - "wget -qO- http://localhost:3001/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# 创建专用网络用于前后端通信
networks:
  playground-network:
    driver: bridge

# 持久化存储
volumes:
  mongo_data:    # MongoDB 数据持久化 