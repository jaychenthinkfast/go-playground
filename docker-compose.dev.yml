version: '3'

services:
  # 前端开发服务
  frontend-dev:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: go-playground-frontend-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3003:3003"  # 映射开发服务器端口，改为3003:3003
    environment:
      - NODE_ENV=development
    depends_on:
      backend-go124-dev:
        condition: service_healthy
      backend-go123-dev:
        condition: service_healthy
      backend-go122-dev:
        condition: service_healthy
      share-service-dev:
        condition: service_healthy
    networks:
      - playground-network
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 200M
        reservations:
          cpus: '0.1'
          memory: 100M
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: npm run serve  # 使用Vue开发服务器

  # Share 服务开发环境
  share-service-dev:
    build:
      context: ./share-service
      dockerfile: Dockerfile.dev
    container_name: go-playground-share-dev
    volumes:
      - ./share-service:/app  # 将源代码挂载到容器内，支持热更新
      - share-service-go-mod-cache:/go/pkg/mod  # 缓存Go模块，加快构建速度
    environment:
      - TZ=UTC
      - PORT=3002
      - MONGO_URI=mongodb://mongo:27017
      - MONGO_DB=playground
      - GO_ENV=development
    ports:
      - "3002:3002"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M
        reservations:
          cpus: '0.1'
          memory: 100M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB 服务
  mongo:
    build:
      context: .
      dockerfile: share-service/Dockerfile.mongo
    container_name: go-playground-mongo
    volumes:
      - mongo_data_dev:/data/db
    environment:
      - MONGO_INITDB_DATABASE=playground
    networks:
      - playground-network
    restart: always
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 500M
        reservations:
          cpus: '0.1'
          memory: 200M
    # 健康检查
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Go 1.24 后端服务 (开发环境)
  backend-go124-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: go-playground-backend-go124-dev
    volumes:
      - ./backend:/app  # 将源代码挂载到容器内，支持热更新
      - backend-go124-mod-cache:/go/pkg/mod  # Go 1.24特定的缓存Go模块
    ports:
      - "3001:3001"  # Expose backend service port to host
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.24
      - AIR_TMPDIR=/app/tmp/go124  # 确保每个版本使用独立的临时目录
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Go 1.23 后端服务 (开发环境)
  backend-go123-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: go-playground-backend-go123-dev
    volumes:
      - ./backend:/app  # 将源代码挂载到容器内，支持热更新
      - backend-go123-mod-cache:/go/pkg/mod  # Go 1.23特定的缓存Go模块
    ports:
      - "3011:3001"  # Use different host port to avoid conflict
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.23
      - AIR_TMPDIR=/app/tmp/go123  # 确保每个版本使用独立的临时目录
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Go 1.22 后端服务 (开发环境)
  backend-go122-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: go-playground-backend-go122-dev
    volumes:
      - ./backend:/app  # 将源代码挂载到容器内，支持热更新
      - backend-go122-mod-cache:/go/pkg/mod  # Go 1.22特定的缓存Go模块
    ports:
      - "3021:3001"  # Use different host port to avoid conflict
    environment:
      - TZ=UTC
      - PORT=3001    # 后端服务端口
      - GO_VERSION=go1.22
      - AIR_TMPDIR=/app/tmp/go122  # 确保每个版本使用独立的临时目录
    networks:
      - playground-network
    restart: always
    # 安全设置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # 资源限制和重启策略
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 400M
        reservations:
          cpus: '0.2'
          memory: 200M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # 健康检查
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# 创建专用网络用于前后端通信
networks:
  playground-network:
    driver: bridge

# 持久化存储
volumes:
  mongo_data_dev:    # MongoDB 数据持久化 
  share-service-go-mod-cache:  # 添加Share服务Go模块缓存卷
  backend-go124-mod-cache:  # 添加Backend服务Go模块缓存卷
  backend-go123-mod-cache:  # 添加Go 1.23特定的缓存Go模块
  backend-go122-mod-cache:  # 添加Go 1.22特定的缓存Go模块